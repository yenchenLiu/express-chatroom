#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { app, sessionParser } = require('../app');
const debug = require('debug')('express-js:server');
const http = require('http');
const models = require('../models');

const WebSocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const wss = new WebSocket.Server({ clientTracking: false, noServer: true });


models.sequelize.sync().then(function() {
/**
 * Listen on provided port, on all network interfaces.
 */

  server.on('error', onError);
  server.on('listening', onListening);


  server.on('upgrade', function(request, socket, head) {
    sessionParser(request, {}, () => {
      if (!request.session.passport.user) {
        socket.destroy();
        return;
      }

      wss.handleUpgrade(request, socket, head, function(ws) {
        wss.emit('connection', ws, request);
      });
    });
  });
  server.listen(port);

});


wss.on('connection', function(ws, request) {
  const userId = request.session.passport.user.id;

  ws.on('message', function(message) {
    console.log(`Received message ${message} from user ${userId}`);
  });

  ws.on('error', function(err) {
    console.log(err);
  });

  ws.on('close', function() {
    console.log('close');
  });

  app.on("newMessage", function (message) {
    ws.send(message);
  });

  // eventEmitter.on('newMessage', function (message) {
  //   ws.send(message);
  // });

});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
